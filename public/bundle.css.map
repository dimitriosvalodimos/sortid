{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Header.svelte",
    "../src/Searchbar.svelte",
    "../src/Card.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Header from \"./Header.svelte\";\n  import Searchbar from \"./Searchbar.svelte\";\n  import Card from \"./Card.svelte\";\n\n  let topRow = [];\n  let bottomRow = [];\n\n  const dataSplitter = e => {\n    const data = e.detail;\n\n    if (data.length % 2 == 0) {\n      const halfPoint = data.length / 2;\n      topRow = data.splice(0, halfPoint);\n      bottomRow = data;\n    }\n  };\n</script>\n\n<style>\n  .cardRow {\n    display: flex;\n    justify-content: space-around;\n  }\n\n  #bottomRow {\n    margin-bottom: 3rem;\n  }\n</style>\n\n<Header />\n<Searchbar on:displaydata={dataSplitter} />\n<div id=\"topRow\" class=\"cardRow\">\n  {#if topRow.length > 0}\n    {#each topRow as post}\n      <Card\n        preview={post.preview}\n        title={post.title}\n        author={post.author}\n        url={post.url}\n        upvotes={post.upvotes}\n        comments={post.comments} />\n    {/each}\n  {/if}\n</div>\n<div id=\"bottomRow\" class=\"cardRow\">\n  {#if bottomRow.length > 0}\n    {#each bottomRow as post}\n      <Card\n        preview={post.preview}\n        title={post.title}\n        author={post.author}\n        url={post.url}\n        upvotes={post.upvotes}\n        comments={post.comments} />\n    {/each}\n  {/if}\n</div>\n",
    "<style>\n  h1 {\n    font-size: 3rem;\n    margin: 3rem 3rem;\n    text-align: center;\n  }\n</style>\n\n<h1>Sortid</h1>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatcher = createEventDispatcher();\n\n  let inputText;\n\n  const checkKey = e => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      process();\n    }\n  };\n\n  const fetchRedditData = async subredditName => {\n    if (subredditName) {\n      const uri = `https://www.reddit.com/r/${subredditName}.json`;\n\n      const response = await fetch(uri);\n      const data = await response.json();\n      return data;\n    }\n  };\n\n  const getImportantDatapoints = entry => {\n    return {\n      title: entry.data.title,\n      author: entry.data.author,\n      preview: entry.data.thumbnail,\n      upvotes: entry.data.ups,\n      comments: entry.data.num_comments,\n      url: entry.data.url\n    };\n  };\n\n  const getNFormattedEntries = (totalEntries, numOfEntries) => {\n    const relevant = [];\n\n    let index = 0;\n    let validEntries = 0;\n\n    while (validEntries < numOfEntries) {\n      const currentEntry = totalEntries.data.children[index];\n      if (currentEntry.data.thumbnail != \"self\") {\n        index++;\n        validEntries++;\n        relevant.push(getImportantDatapoints(currentEntry));\n      } else {\n        index++;\n      }\n    }\n    return relevant;\n  };\n\n  const process = async () => {\n    const fetchedData = await fetchRedditData(inputText);\n    inputText = \"\";\n    const entriesToDisplay = getNFormattedEntries(fetchedData, 6);\n    dispatcher(\"displaydata\", entriesToDisplay);\n  };\n</script>\n\n<style>\n  .searcharea {\n    text-align: center;\n    margin: 2rem;\n  }\n\n  input {\n    width: 50vw;\n    height: 4rem;\n  }\n\n  button {\n    height: 4rem;\n    width: 6rem;\n  }\n</style>\n\n<div class=\"searcharea\">\n  <input\n    type=\"text\"\n    bind:value={inputText}\n    placeholder=\"Enter subreddit name here...\"\n    on:keyup={checkKey} />\n  <button type=\"submit\" on:click={process}>Submit</button>\n</div>\n",
    "<script>\n  import { fly } from \"svelte/transition\";\n\n  export let title;\n  export let author;\n  export let preview;\n  export let url;\n  export let upvotes;\n  export let comments;\n\n  const openLink = () => {\n    window.open(url, \"_blank\");\n  };\n</script>\n\n<style>\n  .card {\n    border: 1px lightgray solid;\n    border-radius: 15px;\n    display: inline-block;\n    width: 27vw;\n    text-align: center;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    position: relative;\n  }\n\n  img {\n    padding: 2rem 0;\n  }\n  h4 {\n    padding: 0 1rem;\n  }\n\n  hr {\n    color: lightgray;\n    width: 75%;\n  }\n</style>\n\n<div class=\"card\" transition:fly={{ y: 50, duration: 1000 }}>\n  <img src={preview} alt=\"\" on:click={openLink} />\n  <hr />\n  <h4>{title}</h4>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAoBE,QAAQ,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,YAAY,AAC/B,CAAC,AAED,UAAU,cAAC,CAAC,AACV,aAAa,CAAE,IAAI,AACrB,CAAC;AC1BD,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,UAAU,CAAE,MAAM,AACpB,CAAC;AC0DD,WAAW,cAAC,CAAC,AACX,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,IAAI,AACd,CAAC,AAED,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC;AC5DD,KAAK,eAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,SAAS,CAAC,KAAK,CAC3B,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,GAAG,eAAC,CAAC,AACH,OAAO,CAAE,IAAI,CAAC,CAAC,AACjB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,OAAO,CAAE,CAAC,CAAC,IAAI,AACjB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,SAAS,CAChB,KAAK,CAAE,GAAG,AACZ,CAAC"
}